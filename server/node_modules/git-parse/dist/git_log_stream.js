"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _child_process = _interopRequireDefault(require("child_process"));

var _git_log_format_markers = require("./constants/git_log_format_markers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const gitLogFormatString = `${_git_log_format_markers.gitLogCommitMarker}%n%H%n%an%n%ae%n%aD%n${_git_log_format_markers.gitLogMessageMarker}%n%B%n${_git_log_format_markers.gitLogFileMarker}`;

/*
  Returns a stream of git log data from a git repository
*/
const gitLogStream = (pathToRepo, options = {}) => {
  const sinceCommit = options.sinceCommit ? `${options.sinceCommit}..HEAD` : "";
  const gitParams = ["log", `--pretty=format:${gitLogFormatString}`, "--name-status", sinceCommit, "--", "./*", ":!node_modules"].filter(elt => elt !== "");

  const gitProcess = _child_process.default.spawn("git", gitParams, {
    cwd: pathToRepo
  });

  const errorHandlers = [];
  gitProcess.on("error", e => errorHandlers.forEach(handler => handler(e)));
  return {
    stream: gitProcess.stdout,
    addErrorHandler: fn => errorHandlers.push(fn)
  };
};

var _default = gitLogStream;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9naXRfbG9nX3N0cmVhbS50cyJdLCJuYW1lcyI6WyJnaXRMb2dGb3JtYXRTdHJpbmciLCJnaXRMb2dDb21taXRNYXJrZXIiLCJnaXRMb2dNZXNzYWdlTWFya2VyIiwiZ2l0TG9nRmlsZU1hcmtlciIsImdpdExvZ1N0cmVhbSIsInBhdGhUb1JlcG8iLCJvcHRpb25zIiwic2luY2VDb21taXQiLCJnaXRQYXJhbXMiLCJmaWx0ZXIiLCJlbHQiLCJnaXRQcm9jZXNzIiwiY2hpbGRQcm9jZXNzIiwic3Bhd24iLCJjd2QiLCJlcnJvckhhbmRsZXJzIiwib24iLCJlIiwiZm9yRWFjaCIsImhhbmRsZXIiLCJzdHJlYW0iLCJzdGRvdXQiLCJhZGRFcnJvckhhbmRsZXIiLCJmbiIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQU1BLE1BQU1BLGtCQUFrQixHQUFJLEdBQUVDLDBDQUFtQix3QkFBdUJDLDJDQUFvQixTQUFRQyx3Q0FBaUIsRUFBckg7O0FBUUE7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLENBQ25CQyxVQURtQixFQUVuQkMsT0FBNEIsR0FBRyxFQUZaLEtBR2hCO0FBQ0gsUUFBTUMsV0FBVyxHQUFHRCxPQUFPLENBQUNDLFdBQVIsR0FBdUIsR0FBRUQsT0FBTyxDQUFDQyxXQUFZLFFBQTdDLEdBQXVELEVBQTNFO0FBQ0EsUUFBTUMsU0FBUyxHQUFHLENBQ2hCLEtBRGdCLEVBRWYsbUJBQWtCUixrQkFBbUIsRUFGdEIsRUFHaEIsZUFIZ0IsRUFJaEJPLFdBSmdCLEVBS2hCLElBTGdCLEVBTWhCLEtBTmdCLEVBT2hCLGdCQVBnQixFQVFoQkUsTUFSZ0IsQ0FRUkMsR0FBRCxJQUFTQSxHQUFHLEtBQUssRUFSUixDQUFsQjs7QUFVQSxRQUFNQyxVQUFVLEdBQUdDLHVCQUFhQyxLQUFiLENBQW1CLEtBQW5CLEVBQTBCTCxTQUExQixFQUFxQztBQUFFTSxJQUFBQSxHQUFHLEVBQUVUO0FBQVAsR0FBckMsQ0FBbkI7O0FBQ0EsUUFBTVUsYUFBeUMsR0FBRyxFQUFsRDtBQUNBSixFQUFBQSxVQUFVLENBQUNLLEVBQVgsQ0FBYyxPQUFkLEVBQXdCQyxDQUFELElBQU9GLGFBQWEsQ0FBQ0csT0FBZCxDQUF1QkMsT0FBRCxJQUFhQSxPQUFPLENBQUNGLENBQUQsQ0FBMUMsQ0FBOUI7QUFDQSxTQUFPO0FBQ0xHLElBQUFBLE1BQU0sRUFBRVQsVUFBVSxDQUFDVSxNQURkO0FBRUxDLElBQUFBLGVBQWUsRUFBR0MsRUFBRCxJQUFrQ1IsYUFBYSxDQUFDUyxJQUFkLENBQW1CRCxFQUFuQjtBQUY5QyxHQUFQO0FBSUQsQ0F0QkQ7O2VBd0JlbkIsWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGlsZFByb2Nlc3MgZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcbmltcG9ydCB7XG4gIGdpdExvZ0NvbW1pdE1hcmtlcixcbiAgZ2l0TG9nTWVzc2FnZU1hcmtlcixcbiAgZ2l0TG9nRmlsZU1hcmtlcixcbn0gZnJvbSBcIi4vY29uc3RhbnRzL2dpdF9sb2dfZm9ybWF0X21hcmtlcnNcIjtcblxuY29uc3QgZ2l0TG9nRm9ybWF0U3RyaW5nID0gYCR7Z2l0TG9nQ29tbWl0TWFya2VyfSVuJUglbiVhbiVuJWFlJW4lYUQlbiR7Z2l0TG9nTWVzc2FnZU1hcmtlcn0lbiVCJW4ke2dpdExvZ0ZpbGVNYXJrZXJ9YDtcblxuZXhwb3J0IHR5cGUgR2l0TG9nU3RyZWFtRXJyb3JIYW5kbGVyID0gKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBHaXRMb2dTdHJlYW1PcHRpb25zIHtcbiAgc2luY2VDb21taXQ/OiBzdHJpbmc7XG59XG5cbi8qXG4gIFJldHVybnMgYSBzdHJlYW0gb2YgZ2l0IGxvZyBkYXRhIGZyb20gYSBnaXQgcmVwb3NpdG9yeVxuKi9cbmNvbnN0IGdpdExvZ1N0cmVhbSA9IChcbiAgcGF0aFRvUmVwbzogc3RyaW5nLFxuICBvcHRpb25zOiBHaXRMb2dTdHJlYW1PcHRpb25zID0ge31cbikgPT4ge1xuICBjb25zdCBzaW5jZUNvbW1pdCA9IG9wdGlvbnMuc2luY2VDb21taXQgPyBgJHtvcHRpb25zLnNpbmNlQ29tbWl0fS4uSEVBRGAgOiBcIlwiO1xuICBjb25zdCBnaXRQYXJhbXMgPSBbXG4gICAgXCJsb2dcIixcbiAgICBgLS1wcmV0dHk9Zm9ybWF0OiR7Z2l0TG9nRm9ybWF0U3RyaW5nfWAsXG4gICAgXCItLW5hbWUtc3RhdHVzXCIsXG4gICAgc2luY2VDb21taXQsXG4gICAgXCItLVwiLFxuICAgIFwiLi8qXCIsXG4gICAgXCI6IW5vZGVfbW9kdWxlc1wiLFxuICBdLmZpbHRlcigoZWx0KSA9PiBlbHQgIT09IFwiXCIpO1xuXG4gIGNvbnN0IGdpdFByb2Nlc3MgPSBjaGlsZFByb2Nlc3Muc3Bhd24oXCJnaXRcIiwgZ2l0UGFyYW1zLCB7IGN3ZDogcGF0aFRvUmVwbyB9KTtcbiAgY29uc3QgZXJyb3JIYW5kbGVyczogR2l0TG9nU3RyZWFtRXJyb3JIYW5kbGVyW10gPSBbXTtcbiAgZ2l0UHJvY2Vzcy5vbihcImVycm9yXCIsIChlKSA9PiBlcnJvckhhbmRsZXJzLmZvckVhY2goKGhhbmRsZXIpID0+IGhhbmRsZXIoZSkpKTtcbiAgcmV0dXJuIHtcbiAgICBzdHJlYW06IGdpdFByb2Nlc3Muc3Rkb3V0LFxuICAgIGFkZEVycm9ySGFuZGxlcjogKGZuOiBHaXRMb2dTdHJlYW1FcnJvckhhbmRsZXIpID0+IGVycm9ySGFuZGxlcnMucHVzaChmbiksXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnaXRMb2dTdHJlYW07XG4iXX0=