"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _git_log_format_markers = require("./constants/git_log_format_markers");

const parseCommit = commit => {
  const hash = commit[0];
  const authorName = commit[1];
  const authorEmail = commit[2];
  const date = commit[3];
  const messageIndex = commit.findIndex(line => line.match(_git_log_format_markers.gitLogMessageMarker));
  const fileIndex = commit.findIndex(line => line.match(_git_log_format_markers.gitLogFileMarker));
  const message = commit.slice(messageIndex + 1, fileIndex).join("\n");
  const files = commit.slice(fileIndex + 1);
  const addPattern = /^A\s([^\s]+)/;
  const deletePattern = /^D\s([^\s]+)/;
  const modifyPattern = /^M\s([^\s]+)/;
  const renamePattern = /^R[0-9]+\s(.+)\s(.+)/;

  const filterFileChanges = pattern => {
    return files.reduce((accumulator, file) => {
      const match = file.match(pattern);

      if (match) {
        accumulator.push({
          path: match[1]
        });
      }

      return accumulator;
    }, []);
  };

  const filesRenamed = files.reduce((accumulator, file) => {
    const match = file.match(renamePattern);

    if (match) {
      accumulator.push({
        oldPath: match[1],
        newPath: match[2]
      });
    }

    return accumulator;
  }, []);
  const parsedCommit = {
    hash,
    authorName,
    authorEmail,
    date,
    message,
    filesAdded: filterFileChanges(addPattern),
    filesDeleted: filterFileChanges(deletePattern),
    filesModified: filterFileChanges(modifyPattern),
    filesRenamed
  };
  return parsedCommit;
};

var _default = parseCommit;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJzZV9jb21taXQudHMiXSwibmFtZXMiOlsicGFyc2VDb21taXQiLCJjb21taXQiLCJoYXNoIiwiYXV0aG9yTmFtZSIsImF1dGhvckVtYWlsIiwiZGF0ZSIsIm1lc3NhZ2VJbmRleCIsImZpbmRJbmRleCIsImxpbmUiLCJtYXRjaCIsImdpdExvZ01lc3NhZ2VNYXJrZXIiLCJmaWxlSW5kZXgiLCJnaXRMb2dGaWxlTWFya2VyIiwibWVzc2FnZSIsInNsaWNlIiwiam9pbiIsImZpbGVzIiwiYWRkUGF0dGVybiIsImRlbGV0ZVBhdHRlcm4iLCJtb2RpZnlQYXR0ZXJuIiwicmVuYW1lUGF0dGVybiIsImZpbHRlckZpbGVDaGFuZ2VzIiwicGF0dGVybiIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiZmlsZSIsInB1c2giLCJwYXRoIiwiZmlsZXNSZW5hbWVkIiwib2xkUGF0aCIsIm5ld1BhdGgiLCJwYXJzZWRDb21taXQiLCJmaWxlc0FkZGVkIiwiZmlsZXNEZWxldGVkIiwiZmlsZXNNb2RpZmllZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOztBQUtBLE1BQU1BLFdBQVcsR0FBSUMsTUFBRCxJQUFpQztBQUNuRCxRQUFNQyxJQUFJLEdBQUdELE1BQU0sQ0FBQyxDQUFELENBQW5CO0FBQ0EsUUFBTUUsVUFBVSxHQUFHRixNQUFNLENBQUMsQ0FBRCxDQUF6QjtBQUNBLFFBQU1HLFdBQVcsR0FBR0gsTUFBTSxDQUFDLENBQUQsQ0FBMUI7QUFDQSxRQUFNSSxJQUFJLEdBQUdKLE1BQU0sQ0FBQyxDQUFELENBQW5CO0FBRUEsUUFBTUssWUFBWSxHQUFHTCxNQUFNLENBQUNNLFNBQVAsQ0FBa0JDLElBQUQsSUFDcENBLElBQUksQ0FBQ0MsS0FBTCxDQUFXQywyQ0FBWCxDQURtQixDQUFyQjtBQUdBLFFBQU1DLFNBQVMsR0FBR1YsTUFBTSxDQUFDTSxTQUFQLENBQWtCQyxJQUFELElBQVVBLElBQUksQ0FBQ0MsS0FBTCxDQUFXRyx3Q0FBWCxDQUEzQixDQUFsQjtBQUNBLFFBQU1DLE9BQU8sR0FBR1osTUFBTSxDQUFDYSxLQUFQLENBQWFSLFlBQVksR0FBRyxDQUE1QixFQUErQkssU0FBL0IsRUFBMENJLElBQTFDLENBQStDLElBQS9DLENBQWhCO0FBQ0EsUUFBTUMsS0FBSyxHQUFHZixNQUFNLENBQUNhLEtBQVAsQ0FBYUgsU0FBUyxHQUFHLENBQXpCLENBQWQ7QUFFQSxRQUFNTSxVQUFVLEdBQUcsY0FBbkI7QUFDQSxRQUFNQyxhQUFhLEdBQUcsY0FBdEI7QUFDQSxRQUFNQyxhQUFhLEdBQUcsY0FBdEI7QUFDQSxRQUFNQyxhQUFhLEdBQUcsc0JBQXRCOztBQUVBLFFBQU1DLGlCQUFpQixHQUFJQyxPQUFELElBQXlDO0FBQ2pFLFdBQU9OLEtBQUssQ0FBQ08sTUFBTixDQUFhLENBQUNDLFdBQUQsRUFBa0NDLElBQWxDLEtBQW1EO0FBQ3JFLFlBQU1oQixLQUFLLEdBQUdnQixJQUFJLENBQUNoQixLQUFMLENBQVdhLE9BQVgsQ0FBZDs7QUFDQSxVQUFJYixLQUFKLEVBQVc7QUFDVGUsUUFBQUEsV0FBVyxDQUFDRSxJQUFaLENBQWlCO0FBQUVDLFVBQUFBLElBQUksRUFBRWxCLEtBQUssQ0FBQyxDQUFEO0FBQWIsU0FBakI7QUFDRDs7QUFFRCxhQUFPZSxXQUFQO0FBQ0QsS0FQTSxFQU9KLEVBUEksQ0FBUDtBQVFELEdBVEQ7O0FBV0EsUUFBTUksWUFBMEIsR0FBR1osS0FBSyxDQUFDTyxNQUFOLENBQ2pDLENBQUNDLFdBQUQsRUFBNEJDLElBQTVCLEtBQTZDO0FBQzNDLFVBQU1oQixLQUFLLEdBQUdnQixJQUFJLENBQUNoQixLQUFMLENBQVdXLGFBQVgsQ0FBZDs7QUFDQSxRQUFJWCxLQUFKLEVBQVc7QUFDVGUsTUFBQUEsV0FBVyxDQUFDRSxJQUFaLENBQWlCO0FBQ2ZHLFFBQUFBLE9BQU8sRUFBRXBCLEtBQUssQ0FBQyxDQUFELENBREM7QUFFZnFCLFFBQUFBLE9BQU8sRUFBRXJCLEtBQUssQ0FBQyxDQUFEO0FBRkMsT0FBakI7QUFJRDs7QUFDRCxXQUFPZSxXQUFQO0FBQ0QsR0FWZ0MsRUFXakMsRUFYaUMsQ0FBbkM7QUFjQSxRQUFNTyxZQUFZLEdBQUc7QUFDbkI3QixJQUFBQSxJQURtQjtBQUVuQkMsSUFBQUEsVUFGbUI7QUFHbkJDLElBQUFBLFdBSG1CO0FBSW5CQyxJQUFBQSxJQUptQjtBQUtuQlEsSUFBQUEsT0FMbUI7QUFNbkJtQixJQUFBQSxVQUFVLEVBQUVYLGlCQUFpQixDQUFDSixVQUFELENBTlY7QUFPbkJnQixJQUFBQSxZQUFZLEVBQUVaLGlCQUFpQixDQUFDSCxhQUFELENBUFo7QUFRbkJnQixJQUFBQSxhQUFhLEVBQUViLGlCQUFpQixDQUFDRixhQUFELENBUmI7QUFTbkJTLElBQUFBO0FBVG1CLEdBQXJCO0FBWUEsU0FBT0csWUFBUDtBQUNELENBeEREOztlQTBEZS9CLFciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEdpdENvbW1pdCxcbiAgRmlsZU1vZGlmaWNhdGlvbixcbiAgRmlsZVJlbmFtZSxcbn0gZnJvbSBcIi4vdHlwZXMvZ2l0X2NvbW1pdF90eXBlXCI7XG5cbmltcG9ydCB7XG4gIGdpdExvZ01lc3NhZ2VNYXJrZXIsXG4gIGdpdExvZ0ZpbGVNYXJrZXIsXG59IGZyb20gXCIuL2NvbnN0YW50cy9naXRfbG9nX2Zvcm1hdF9tYXJrZXJzXCI7XG5cbmNvbnN0IHBhcnNlQ29tbWl0ID0gKGNvbW1pdDogc3RyaW5nW10pOiBHaXRDb21taXQgPT4ge1xuICBjb25zdCBoYXNoID0gY29tbWl0WzBdO1xuICBjb25zdCBhdXRob3JOYW1lID0gY29tbWl0WzFdO1xuICBjb25zdCBhdXRob3JFbWFpbCA9IGNvbW1pdFsyXTtcbiAgY29uc3QgZGF0ZSA9IGNvbW1pdFszXTtcblxuICBjb25zdCBtZXNzYWdlSW5kZXggPSBjb21taXQuZmluZEluZGV4KChsaW5lKSA9PlxuICAgIGxpbmUubWF0Y2goZ2l0TG9nTWVzc2FnZU1hcmtlcilcbiAgKTtcbiAgY29uc3QgZmlsZUluZGV4ID0gY29tbWl0LmZpbmRJbmRleCgobGluZSkgPT4gbGluZS5tYXRjaChnaXRMb2dGaWxlTWFya2VyKSk7XG4gIGNvbnN0IG1lc3NhZ2UgPSBjb21taXQuc2xpY2UobWVzc2FnZUluZGV4ICsgMSwgZmlsZUluZGV4KS5qb2luKFwiXFxuXCIpO1xuICBjb25zdCBmaWxlcyA9IGNvbW1pdC5zbGljZShmaWxlSW5kZXggKyAxKTtcblxuICBjb25zdCBhZGRQYXR0ZXJuID0gL15BXFxzKFteXFxzXSspLztcbiAgY29uc3QgZGVsZXRlUGF0dGVybiA9IC9eRFxccyhbXlxcc10rKS87XG4gIGNvbnN0IG1vZGlmeVBhdHRlcm4gPSAvXk1cXHMoW15cXHNdKykvO1xuICBjb25zdCByZW5hbWVQYXR0ZXJuID0gL15SWzAtOV0rXFxzKC4rKVxccyguKykvO1xuXG4gIGNvbnN0IGZpbHRlckZpbGVDaGFuZ2VzID0gKHBhdHRlcm46IFJlZ0V4cCk6IEZpbGVNb2RpZmljYXRpb25bXSA9PiB7XG4gICAgcmV0dXJuIGZpbGVzLnJlZHVjZSgoYWNjdW11bGF0b3I6IEZpbGVNb2RpZmljYXRpb25bXSwgZmlsZTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IGZpbGUubWF0Y2gocGF0dGVybik7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaCh7IHBhdGg6IG1hdGNoWzFdIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfSwgW10pO1xuICB9O1xuXG4gIGNvbnN0IGZpbGVzUmVuYW1lZDogRmlsZVJlbmFtZVtdID0gZmlsZXMucmVkdWNlKFxuICAgIChhY2N1bXVsYXRvcjogRmlsZVJlbmFtZVtdLCBmaWxlOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZmlsZS5tYXRjaChyZW5hbWVQYXR0ZXJuKTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKHtcbiAgICAgICAgICBvbGRQYXRoOiBtYXRjaFsxXSxcbiAgICAgICAgICBuZXdQYXRoOiBtYXRjaFsyXSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IHBhcnNlZENvbW1pdCA9IHtcbiAgICBoYXNoLFxuICAgIGF1dGhvck5hbWUsXG4gICAgYXV0aG9yRW1haWwsXG4gICAgZGF0ZSxcbiAgICBtZXNzYWdlLFxuICAgIGZpbGVzQWRkZWQ6IGZpbHRlckZpbGVDaGFuZ2VzKGFkZFBhdHRlcm4pLFxuICAgIGZpbGVzRGVsZXRlZDogZmlsdGVyRmlsZUNoYW5nZXMoZGVsZXRlUGF0dGVybiksXG4gICAgZmlsZXNNb2RpZmllZDogZmlsdGVyRmlsZUNoYW5nZXMobW9kaWZ5UGF0dGVybiksXG4gICAgZmlsZXNSZW5hbWVkLFxuICB9O1xuXG4gIHJldHVybiBwYXJzZWRDb21taXQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUNvbW1pdDtcbiJdfQ==